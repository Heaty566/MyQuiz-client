{"version":3,"sources":["containers/takeExam/TakeExam.scene.tsx","containers/takeExam/index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","helpers/time.helper.ts"],"names":["TakeQuizScene","quiz","currentQuestion","handleOnChangeQuestion","correctAnswer","handleSelectAnswer","currentSelect","isShowScore","score","handleOnSubmitExam","questionCounter","userState","useSelector","selectUser","useState","isStart","setStart","isSubmit","setSubmit","timer","setTimer","useEffect","time","inter","setInterval","clearInterval","className","name","convertTime","onClick","questions","length","question","answers","map","item","index","includes","key","Fragment","fullName","toFixed","to","TakeQuiz","params","useParams","quizState","quizSelector","setCurrentQuestion","setCorrectAnswer","setCurrentSelect","setQuiz","currentAnswer","setCurrentAnswer","setScore","setShowScore","arr","forEach","push","newShuffle","sort","Math","random","tracker","newAnswer","newCorrectAnswer","correct","indexOf","store","dispatch","getQuizById","quizId","type","total","count","wrong","answer","reduce","cur","next","newSelect","filter","updateAnswer","_slicedToArray","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","done","value","err","unsupportedIterableToArray","TypeError","_unsupportedIterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","from","test","_arrayLikeToArray","len","arr2","_defineProperty","obj","defineProperty","enumerable","configurable","writable","_toConsumableArray","arrayLikeToArray","iter","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","arguments","source","getOwnPropertyDescriptors","defineProperties","minutes","floor","seconds","result"],"mappings":"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","file":"static/js/4.b0203f74.chunk.js","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from \"react\";\r\nimport { Quiz } from \"../../reducers/quiz.reducer\";\r\nimport { convertTime } from \"../../helpers/time.helper\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../../reducers/user.reducer\";\r\n\r\nexport interface TakeQuizSceneProps {\r\n        quiz: Quiz;\r\n        currentQuestion: number;\r\n        handleOnChangeQuestion: Function;\r\n        correctAnswer: number[];\r\n        currentSelect: number[];\r\n        handleSelectAnswer: Function;\r\n        score: number;\r\n        isShowScore: boolean;\r\n        handleOnSubmitExam: Function;\r\n}\r\n\r\nconst TakeQuizScene: FunctionComponent<TakeQuizSceneProps> = ({\r\n        quiz,\r\n        currentQuestion = 0,\r\n        handleOnChangeQuestion,\r\n        correctAnswer,\r\n        handleSelectAnswer,\r\n        currentSelect = [],\r\n        isShowScore,\r\n        score,\r\n        handleOnSubmitExam,\r\n}) => {\r\n        const questionCounter = currentQuestion + 1;\r\n        const userState = useSelector(selectUser);\r\n        const [isStart, setStart] = useState(false);\r\n        const [isSubmit, setSubmit] = useState(false);\r\n        const [timer, setTimer] = useState(0);\r\n\r\n        useEffect(() => {\r\n                setTimer(quiz.time);\r\n        }, [quiz.time]);\r\n        useEffect(() => {\r\n                if (timer <= -1) {\r\n                        setSubmit(true);\r\n                        handleOnSubmitExam();\r\n                }\r\n        }, [timer, handleOnSubmitExam]);\r\n\r\n        useEffect(() => {\r\n                let inter: any;\r\n\r\n                if (isStart) {\r\n                        inter = setInterval(() => {\r\n                                setTimer(timer - 1);\r\n                        }, 1000);\r\n                }\r\n                if (isSubmit) {\r\n                        clearInterval(inter);\r\n                }\r\n\r\n                return () => {\r\n                        clearInterval(inter);\r\n                };\r\n        }, [isStart, timer, isSubmit]);\r\n\r\n        return (\r\n                <div className=\"take-quiz\">\r\n                        <div className=\"take-quiz__header\">\r\n                                <h2 className=\"take-quiz__title\">{quiz.name}</h2>\r\n                                <div className=\"take-quiz__header-right\">\r\n                                        <p className=\"take-quiz__timer\">{convertTime(timer)}</p>\r\n                                        <button\r\n                                                className=\"btn btn__link\"\r\n                                                onClick={() => handleOnChangeQuestion(currentQuestion - 1)}\r\n                                        >\r\n                                                Back\r\n                                        </button>\r\n                                        <button\r\n                                                className=\"btn btn__link\"\r\n                                                onClick={() => handleOnChangeQuestion(currentQuestion + 1)}\r\n                                        >\r\n                                                Next\r\n                                        </button>\r\n                                </div>\r\n                        </div>\r\n                        <div className=\"take-quiz__body\">\r\n                                <div className=\"take-quiz__question\">\r\n                                        <p>{`${questionCounter} / ${quiz.questions.length} ---  please choose ${correctAnswer.length}`}</p>\r\n                                        <h3>{quiz.questions[currentQuestion].question}</h3>\r\n                                </div>\r\n                                <div className=\"take-quiz__answer\">\r\n                                        {quiz.questions[currentQuestion].answers.map((item, index) => {\r\n                                                const isSelect = currentSelect.includes(index);\r\n\r\n                                                const className =\r\n                                                        \"take-quiz__btn\" + (isSelect ? \" take-quiz__btn--select\" : \"\");\r\n\r\n                                                return (\r\n                                                        <button\r\n                                                                className={className}\r\n                                                                key={index}\r\n                                                                onClick={() => handleSelectAnswer(index)}\r\n                                                        >\r\n                                                                {item}\r\n                                                        </button>\r\n                                                );\r\n                                        })}\r\n                                </div>\r\n                                <button\r\n                                        className=\"btn btn__link\"\r\n                                        onClick={() => {\r\n                                                setSubmit(true);\r\n                                        }}\r\n                                >\r\n                                        Submit Exam\r\n                                </button>\r\n                        </div>\r\n                        {isSubmit && (\r\n                                <React.Fragment>\r\n                                        <div className=\"exam__modal__masking\"></div>\r\n                                        <div className=\"exam__modal\">\r\n                                                <div className=\"exam__wrapper\">\r\n                                                        <div className=\"card card__bg exam__modal__card\">\r\n                                                                <h3 className=\"card__title\">Are you sure</h3>\r\n\r\n                                                                <div className=\"card__body\">\r\n                                                                        <p className=\"card__text\">\r\n                                                                                Time remaining: {convertTime(timer)}\r\n                                                                        </p>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"card__body\">\r\n                                                                        <button\r\n                                                                                className=\"btn btn__link\"\r\n                                                                                onClick={() => {\r\n                                                                                        handleOnSubmitExam();\r\n                                                                                }}\r\n                                                                        >\r\n                                                                                Yes\r\n                                                                        </button>\r\n                                                                        <button\r\n                                                                                className=\"btn btn__link\"\r\n                                                                                onClick={() => {\r\n                                                                                        setSubmit(false);\r\n                                                                                }}\r\n                                                                        >\r\n                                                                                No\r\n                                                                        </button>\r\n                                                                </div>\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                </React.Fragment>\r\n                        )}\r\n\r\n                        {isSubmit && isShowScore && (\r\n                                <React.Fragment>\r\n                                        <div className=\"exam__modal__masking\"></div>\r\n                                        <div className=\"exam__modal\">\r\n                                                <div className=\"exam__wrapper\">\r\n                                                        <div className=\"card card__bg exam__modal__card\">\r\n                                                                <h3 className=\"card__title\">\r\n                                                                        Thank for {userState.fullName}\r\n                                                                </h3>\r\n                                                                <div className=\"card__body\">\r\n                                                                        <p className=\"card__text\">\r\n                                                                                Your score: {(score * 100).toFixed(2)}%{\" \"}\r\n                                                                        </p>\r\n                                                                </div>\r\n                                                                <Link to=\"/home\" className=\"btn btn__link\">\r\n                                                                        Go Back\r\n                                                                </Link>\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                </React.Fragment>\r\n                        )}\r\n\r\n                        {!isStart && (\r\n                                <React.Fragment>\r\n                                        <div className=\"exam__modal__masking\"></div>\r\n                                        <div className=\"exam__modal\">\r\n                                                <div className=\"exam__wrapper\">\r\n                                                        <div className=\"card card__bg exam__modal__card\">\r\n                                                                <h3 className=\"card__title\">{quiz.name}</h3>\r\n                                                                <div className=\"card__body\">\r\n                                                                        <p className=\"card__text\">\r\n                                                                                {quiz.questions.length} Questions\r\n                                                                        </p>\r\n                                                                        <p className=\"card__text\">\r\n                                                                                {convertTime(quiz.time)}\r\n                                                                        </p>\r\n                                                                </div>\r\n                                                                <button\r\n                                                                        className=\"btn btn__link\"\r\n                                                                        onClick={() => {\r\n                                                                                setStart(true);\r\n                                                                        }}\r\n                                                                >\r\n                                                                        Start\r\n                                                                </button>\r\n                                                        </div>\r\n                                                </div>\r\n                                        </div>\r\n                                </React.Fragment>\r\n                        )}\r\n                </div>\r\n        );\r\n};\r\n\r\nexport default TakeQuizScene;\r\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport TakeQuizScene from \"./TakeExam.scene\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { quizSelector, Quiz } from \"../../reducers/quiz.reducer\";\r\nimport { getQuizById } from \"../../actions/quiz.action\";\r\nimport { store } from \"../../reducers\";\r\nimport \"../../styles/pages/_take-exam.scss\";\r\nimport \"../../styles/pages/_take-quiz.scss\";\r\n\r\nexport interface TakeQuizProps {}\r\n\r\nconst TakeQuiz: FunctionComponent<TakeQuizProps> = () => {\r\n        const params = useParams<{ quizId: string }>();\r\n        const quizState = useSelector(quizSelector);\r\n        const [currentQuestion, setCurrentQuestion] = useState(0);\r\n        const [correctAnswer, setCorrectAnswer] = useState<number[]>([]);\r\n        const [currentSelect, setCurrentSelect] = useState<number[]>([]);\r\n        const [quiz, setQuiz] = useState<Quiz>(quizState.quiz);\r\n        const [currentAnswer, setCurrentAnswer] = useState<number[][]>([]);\r\n        const [score, setScore] = useState(0);\r\n        const [isShowScore, setShowScore] = useState(false);\r\n\r\n        useEffect(() => {\r\n                let arr: number[][] = [];\r\n                quiz.questions.forEach(() => {\r\n                        const temp: number[] = [];\r\n                        arr.push(temp);\r\n                });\r\n\r\n                setCurrentAnswer(arr);\r\n        }, [quiz.questions]);\r\n\r\n        const handleOnSubmitExam = () => {\r\n                const perQuestion = currentAnswer.map((item, index) => {\r\n                        let count = 0;\r\n                        let wrong = 0;\r\n\r\n                        item.forEach((answer) => {\r\n                                if (quiz.questions[index].correctAnswer.includes(answer)) {\r\n                                        count++;\r\n                                } else wrong++;\r\n                        });\r\n\r\n                        return count - wrong < 0 ? 0 : (count - wrong) / quiz.questions[index].correctAnswer.length;\r\n                });\r\n                const total = perQuestion.reduce((cur = 0, next) => cur + next) / quiz.questions.length;\r\n                setScore(total);\r\n                setShowScore(true);\r\n        };\r\n\r\n        useEffect(() => {\r\n                const newShuffle = {\r\n                        ...quizState.quiz,\r\n                        questions: [...quizState.quiz.questions]\r\n                                .sort(() => Math.random() - 0.5)\r\n                                .map((item, index) => {\r\n                                        const tracker = item.correctAnswer.map((correctAnswer) => {\r\n                                                return item.answers[correctAnswer];\r\n                                        });\r\n\r\n                                        const newAnswer = [...item.answers].sort(() => Math.random() - 0.5);\r\n\r\n                                        const newCorrectAnswer = tracker.map((correct) => {\r\n                                                return newAnswer.indexOf(correct);\r\n                                        });\r\n\r\n                                        return {\r\n                                                ...item,\r\n                                                answers: newAnswer,\r\n                                                correctAnswer: newCorrectAnswer,\r\n                                        };\r\n                                }),\r\n                };\r\n                setQuiz(newShuffle);\r\n        }, [quizState.quiz]);\r\n\r\n        useEffect(() => {\r\n                store.dispatch(getQuizById({ quizId: params.quizId, type: \"learn\" }));\r\n        }, [params]);\r\n\r\n        useEffect(() => {\r\n                setCorrectAnswer(quiz.questions[currentQuestion].correctAnswer);\r\n        }, [currentQuestion, quiz]);\r\n\r\n        const handleOnChangeCurrentQuestion = (index: number) => {\r\n                if (index >= 0 && index <= quizState.quiz.questions.length - 1) {\r\n                        setCurrentQuestion(index);\r\n                }\r\n        };\r\n\r\n        useEffect(() => {\r\n                setCurrentSelect(currentAnswer[currentQuestion]);\r\n        }, [currentQuestion, currentAnswer]);\r\n\r\n        const handleOnSelectCorrect = (index: number) => {\r\n                let newSelect = [...currentSelect];\r\n                if (currentSelect.includes(index)) {\r\n                        newSelect = newSelect.filter((item) => item !== index);\r\n                } else {\r\n                        newSelect = [...newSelect, index];\r\n                }\r\n                const updateAnswer = [...currentAnswer];\r\n                updateAnswer[currentQuestion] = newSelect;\r\n                setCurrentAnswer(updateAnswer);\r\n                setCurrentSelect(newSelect);\r\n        };\r\n\r\n        return (\r\n                <TakeQuizScene\r\n                        quiz={quiz}\r\n                        handleOnSubmitExam={handleOnSubmitExam}\r\n                        currentQuestion={currentQuestion}\r\n                        correctAnswer={correctAnswer}\r\n                        handleOnChangeQuestion={handleOnChangeCurrentQuestion}\r\n                        handleSelectAnswer={handleOnSelectCorrect}\r\n                        currentSelect={currentSelect}\r\n                        score={score}\r\n                        isShowScore={isShowScore}\r\n                />\r\n        );\r\n};\r\n\r\nexport default TakeQuiz;\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export const convertTime = (time: number): string => {\r\n        const minutes = Math.floor(time / 60);\r\n        time %= 60;\r\n\r\n        const seconds = time;\r\n\r\n        let result = minutes ? `${minutes}m:` : \"\";\r\n        result += seconds ? `${seconds}s` : \"0s\";\r\n\r\n        return result;\r\n};\r\n"],"sourceRoot":""}