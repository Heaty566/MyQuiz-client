{"version":3,"sources":["components/form/FormCheckBox.tsx","containers/profile/profile.scene.tsx","containers/profile/index.tsx","components/form/FormInput.tsx","components/btn/BtnForm.tsx"],"names":["FormCheckBox","name","register","handleOnClick","value","className","type","ref","style","display","htmlFor","onClick","ProfileScene","handleOnSubmit","currentValue","handleOnCheckBox","errors","isLoading","message","onSubmit","event","Boolean","length","FormInput","placeholder","errorMessage","isTeacher","BtnForm","label","Profile","useForm","handleSubmit","setValue","getValues","watch","userState","useSelector","selectUser","apiState","apiSelector","useEffect","fullName","data","store","dispatch","updateUser","input","filed","height","width"],"mappings":"yJAoBeA,EAXoC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,cAAmC,IAApBC,MACvEC,EAAY,wBAD+E,SAClD,0BAA4B,IAE3E,OACQ,gBAAC,WAAD,KACQ,yBAAOJ,KAAMA,EAAMK,KAAK,WAAWC,IAAK,SAACA,GAAD,OAASL,EAASK,IAAMC,MAAO,CAAEC,QAAS,UAClF,yBAAOJ,UAAWA,EAAWK,QAAST,EAAMU,QAAS,kBAAMR,EAAcF,Q,gBCmDlFW,EAjD4C,SAAC,GAQrD,IAPCC,EAOF,EAPEA,eACAX,EAMF,EANEA,SACAY,EAKF,EALEA,aACAC,EAIF,EAJEA,iBACAC,EAGF,EAHEA,OACAC,EAEF,EAFEA,UAEF,IADEC,eACF,MADY,GACZ,EACE,OACQ,yBAAKb,UAAU,gBACP,wBAAIA,UAAU,kBAAd,uBAEA,0BAAMA,UAAU,YAAYc,SAAU,SAACC,GAAD,OAAWP,EAAeO,KACvDC,QAAQH,EAAQI,SACT,yBAAKjB,UAAU,aACP,yBAAKA,UAAU,iBAAiBa,IAGhD,yBAAKb,UAAU,aACP,2BAAOA,UAAU,cAAcK,QAAQ,YAAvC,aAGA,kBAACa,EAAA,EAAD,CACQC,YAAY,OACZvB,KAAK,WACLC,SAAUA,EACVuB,aAAcT,EAAM,YAGpC,yBAAKX,UAAU,aACP,2BAAOA,UAAU,cAAcK,QAAQ,aAAvC,mBAGA,kBAAC,EAAD,CACQT,KAAK,YACLC,SAAUA,EACVE,MAAOU,EAAaY,UACpBvB,cAAeY,KAG/B,yBAAKV,UAAU,aACP,kBAACsB,EAAA,EAAD,CAASC,MAAM,SAASX,UAAWA,Q,+CCZ5DY,UAlCkC,WAAO,IAAD,EACgBC,cAAvD5B,EADuC,EACvCA,SAAU6B,EAD6B,EAC7BA,aAAcC,EADe,EACfA,SAAUC,EADK,EACLA,UAAWC,EADN,EACMA,MAC/CC,EAAYC,YAAYC,KACxBC,EAAWF,YAAYG,KAC7BL,EAAM,aAENM,qBAAU,WACFR,EAAS,WAAYG,EAAUM,UAC/BT,EAAS,YAAaG,EAAUT,aACrC,CAACS,EAAWH,IAYf,OACQ,kBAAC,EAAD,CACQ9B,SAAUA,EACVW,eAAgBkB,GAbL,SAACW,GACpBC,IAAMC,SAASC,YAAW,CAAEC,MAAOJ,QAa3B5B,aAAcmB,IACdlB,iBAXO,SAACgC,GAChB,IAAMjC,EAAemB,EAAUc,GAE/Bf,EAASe,GAAQjC,IASTE,OAAQsB,EAAStB,OACjBC,UAAWqB,EAASrB,UACpBC,QAASoB,EAASpB,Y,gCC1C1C,WAyBeK,IAhB8B,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,YAAavB,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,SAAkC,IAAxBuB,oBAAwB,MAAT,GAAS,EAC7F,OACQ,gBAAC,WAAD,KACQ,uBAAKpB,UAAU,eACP,yBACQE,IAAK,SAACA,GAAD,OAASL,EAASK,IACvBF,UAAU,cACVmB,YAAaA,EACbvB,KAAMA,KAGrBoB,QAAQI,EAAaH,SAAW,wBAAMjB,UAAU,eAAeoB,M,gCCpBxF,4BA0BeE,IAlBkC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOX,EAAgB,EAAhBA,UACnD,OAAIA,EAEY,yBAAKZ,UAAU,gBACP,+BACA,+BACA,+BACA,gCAKhB,4BAAQA,UAAU,0BAA0BC,KAAK,UACxCW,EAAY,kBAAC,IAAD,CAAa+B,OAAO,KAAKC,MAAM,OAAUrB,K","file":"static/js/8.b76cb39e.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nexport interface FormCheckBoxProps {\r\n        name: string;\r\n        register: Function;\r\n        handleOnClick: Function;\r\n        value: boolean;\r\n}\r\n\r\nconst FormCheckBox: React.SFC<FormCheckBoxProps> = ({ name, register, handleOnClick, value = false }) => {\r\n        const className = \"form__checkbox \" + (value ? \" form__checkbox--active\" : \"\");\r\n\r\n        return (\r\n                <React.Fragment>\r\n                        <input name={name} type=\"checkbox\" ref={(ref) => register(ref)} style={{ display: \"none\" }} />\r\n                        <label className={className} htmlFor={name} onClick={() => handleOnClick(name)}></label>\r\n                </React.Fragment>\r\n        );\r\n};\r\n\r\nexport default FormCheckBox;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport FormInput from \"../../components/form/FormInput\";\r\nimport FormCheckBox from \"../../components/form/FormCheckBox\";\r\nimport { ProfileForm } from \"./index\";\r\nimport \"../../styles/pages/_profile.scss\";\r\nimport BtnForm from \"../../components/btn/BtnForm\";\r\n\r\nexport interface ProfileSceneProps {\r\n        register: Function;\r\n        handleOnSubmit: Function;\r\n        handleOnCheckBox: Function;\r\n        currentValue: ProfileForm;\r\n        errors: any;\r\n        message: string;\r\n        isLoading: boolean;\r\n}\r\n\r\nconst ProfileScene: FunctionComponent<ProfileSceneProps> = ({\r\n        handleOnSubmit,\r\n        register,\r\n        currentValue,\r\n        handleOnCheckBox,\r\n        errors,\r\n        isLoading,\r\n        message = \"\",\r\n}) => {\r\n        return (\r\n                <div className=\"profile f--s\">\r\n                        <h1 className=\"profile__title\">Update Your Profile</h1>\r\n\r\n                        <form className=\"form f--c\" onSubmit={(event) => handleOnSubmit(event)}>\r\n                                {Boolean(message.length) && (\r\n                                        <div className=\"form__col\">\r\n                                                <div className=\"form__message\">{message}</div>\r\n                                        </div>\r\n                                )}\r\n                                <div className=\"form__col\">\r\n                                        <label className=\"form__label\" htmlFor=\"fullName\">\r\n                                                Full name\r\n                                        </label>\r\n                                        <FormInput\r\n                                                placeholder=\"Name\"\r\n                                                name=\"fullName\"\r\n                                                register={register}\r\n                                                errorMessage={errors[\"fullName\"]}\r\n                                        />\r\n                                </div>\r\n                                <div className=\"form__col\">\r\n                                        <label className=\"form__label\" htmlFor=\"isTeacher\">\r\n                                                Are you teacher\r\n                                        </label>\r\n                                        <FormCheckBox\r\n                                                name=\"isTeacher\"\r\n                                                register={register}\r\n                                                value={currentValue.isTeacher}\r\n                                                handleOnClick={handleOnCheckBox}\r\n                                        />\r\n                                </div>\r\n                                <div className=\"form__col\">\r\n                                        <BtnForm label=\"Change\" isLoading={isLoading} />\r\n                                </div>\r\n                        </form>\r\n                </div>\r\n        );\r\n};\r\n\r\nexport default ProfileScene;\r\n","import React, { FunctionComponent, useEffect } from \"react\";\r\nimport ProfileScene from \"./profile.scene\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { selectUser } from \"../../reducers/user.reducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { apiSelector } from \"../../reducers/api.reducer\";\r\nimport { updateUser, UpdateUser } from \"../../actions/user.action\";\r\nimport { store } from \"../../reducers\";\r\n\r\nexport interface ProfileProps {}\r\n\r\nexport interface ProfileForm extends UpdateUser {}\r\n\r\nconst Profile: FunctionComponent<ProfileProps> = () => {\r\n        const { register, handleSubmit, setValue, getValues, watch } = useForm<ProfileForm>();\r\n        const userState = useSelector(selectUser);\r\n        const apiState = useSelector(apiSelector);\r\n        watch(\"isTeacher\");\r\n\r\n        useEffect(() => {\r\n                setValue(\"fullName\", userState.fullName);\r\n                setValue(\"isTeacher\", userState.isTeacher);\r\n        }, [userState, setValue]);\r\n\r\n        const handleOnUpdateUser = (data: ProfileForm) => {\r\n                store.dispatch(updateUser({ input: data }));\r\n        };\r\n\r\n        const handleCheckBox = (filed: keyof ProfileForm) => {\r\n                const currentValue = getValues(filed);\r\n\r\n                setValue(filed, !currentValue);\r\n        };\r\n\r\n        return (\r\n                <ProfileScene\r\n                        register={register}\r\n                        handleOnSubmit={handleSubmit(handleOnUpdateUser)}\r\n                        currentValue={getValues()}\r\n                        handleOnCheckBox={handleCheckBox}\r\n                        errors={apiState.errors}\r\n                        isLoading={apiState.isLoading}\r\n                        message={apiState.message}\r\n                />\r\n        );\r\n};\r\n\r\nexport default Profile;\r\n","import * as React from \"react\";\r\n\r\nexport interface FormInputProps {\r\n        placeholder: string;\r\n        name: string;\r\n        register: Function;\r\n        errorMessage: string;\r\n}\r\n\r\nconst FormInput: React.SFC<FormInputProps> = ({ placeholder, name, register, errorMessage = \"\" }) => {\r\n        return (\r\n                <React.Fragment>\r\n                        <div className=\"form__group\">\r\n                                <input\r\n                                        ref={(ref) => register(ref)}\r\n                                        className=\"form__input\"\r\n                                        placeholder={placeholder}\r\n                                        name={name}\r\n                                />\r\n                        </div>\r\n                        {Boolean(errorMessage.length) && <span className=\"form__error\">{errorMessage}</span>}\r\n                </React.Fragment>\r\n        );\r\n};\r\n\r\nexport default FormInput;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport SpinnerIcon from \"../common/Spinner\";\r\n\r\nexport interface BtnFormProps {\r\n        label: string;\r\n        isLoading: boolean;\r\n}\r\n\r\nconst BtnForm: FunctionComponent<BtnFormProps> = ({ label, isLoading }) => {\r\n        if (isLoading)\r\n                return (\r\n                        <div className=\"wave fade-in\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                        </div>\r\n                );\r\n\r\n        return (\r\n                <button className=\"btn btn__link btn__form\" type=\"submit\">\r\n                        {isLoading ? <SpinnerIcon height=\"16\" width=\"18\" /> : label}\r\n                </button>\r\n        );\r\n};\r\n\r\nexport default BtnForm;\r\n"],"sourceRoot":""}