{"version":3,"sources":["components/pagination/Pagination.tsx","helpers/number.helper.ts","containers/searchQuiz/SearchQuiz.tsx","containers/searchQuiz/index.tsx","hooks/useDebouce.tsx","helpers/time.helper.ts"],"names":["Pagination","pageSize","amount","history","useHistory","useState","currentPage","setCurrentPage","path","setPath","pages","setPages","useEffect","paths","location","pathname","split","length","join","handleOnChangePage","useCallback","index","String","push","Math","ceil","str","Number","Boolean","isNaN","parseFloat","className","onClick","Array","apply","map","_","key","SearchQuizScene","quizzes","params","useParams","useForm","defaultValues","search","register","watcher","watch","apiState","useSelector","apiSelector","searchDebouce","useDebounce","callApi","value","type","src","alt","placeholder","name","autoComplete","ref","item","to","_id","questions","convertTime","time","SearchQuiz","quizState","quizSelector","setQuizzes","store","dispatch","searchQuiz","input","apiAction","changeType","payload","page","newQuizzes","searchQuizzes","slice","deplay","debouceValue","setDebouceValue","handler","setTimeout","clearTimeout","minutes","floor","seconds","result"],"mappings":"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","file":"static/js/10.cdd34c50.chunk.js","sourcesContent":["import React, { FunctionComponent, useEffect, useState, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { isNumeric } from \"../../helpers/number.helper\";\r\n\r\nexport interface PaginationProps {\r\n        pageSize: number;\r\n        amount: number;\r\n}\r\n\r\nconst Pagination: FunctionComponent<PaginationProps> = ({ pageSize = 5, amount = 0 }) => {\r\n        const history = useHistory();\r\n        const [currentPage, setCurrentPage] = useState<string>(\"1\");\r\n        const [path, setPath] = useState(\"\");\r\n        const [pages, setPages] = useState(0);\r\n\r\n        useEffect(() => {\r\n                const paths = history.location.pathname.split(\"/\");\r\n                setCurrentPage(paths[paths.length - 1]);\r\n                paths.length = paths.length - 1;\r\n                setPath(paths.join(\"/\"));\r\n        }, [history, path]);\r\n\r\n        const handleOnChangePage = useCallback(\r\n                (index: number) => {\r\n                        setCurrentPage(String(index));\r\n                        history.push(`${path}/${index}`);\r\n                },\r\n                [history, path]\r\n        );\r\n\r\n        useEffect(() => {\r\n                setPages(Math.ceil(amount / pageSize));\r\n        }, [amount, pageSize]);\r\n\r\n        useEffect(() => {\r\n                if (\r\n                        (Number(currentPage) <= 0 && Boolean(path.length)) ||\r\n                        (!isNumeric(currentPage) && Boolean(path.length))\r\n                )\r\n                        handleOnChangePage(1);\r\n\r\n                if (Number(currentPage) > pages && Boolean(path.length) && pages) handleOnChangePage(pages);\r\n        }, [currentPage, history, path, pages, handleOnChangePage]);\r\n\r\n        if (pages === 1) return null;\r\n\r\n        return (\r\n                <div className=\"pagination\">\r\n                        {Boolean(pages) && (\r\n                                <button className=\"pagination__indicator\" onClick={() => handleOnChangePage(1)}>\r\n                                        1\r\n                                </button>\r\n                        )}\r\n                        {Array.apply(null, Array(pages)).map((_, index) => {\r\n                                const className =\r\n                                        \"pagination__indicator\" +\r\n                                        (Number(currentPage) === index + 1 ? \" pagination__indicator--active \" : \"\");\r\n                                if (index > Number(currentPage) + 4) return null;\r\n                                if (index < Number(currentPage) - 4) return null;\r\n                                if (index === 0 || index === pages - 1) return null;\r\n\r\n                                return (\r\n                                        <button\r\n                                                key={index}\r\n                                                className={className}\r\n                                                onClick={() => handleOnChangePage(index + 1)}\r\n                                        >\r\n                                                {index + 1}\r\n                                        </button>\r\n                                );\r\n                        })}\r\n                        {Boolean(pages) && (\r\n                                <button className=\"pagination__indicator\" onClick={() => handleOnChangePage(pages)}>\r\n                                        {pages}\r\n                                </button>\r\n                        )}\r\n                </div>\r\n        );\r\n};\r\n\r\nexport default Pagination;\r\n","export const isNumeric = (str: string) => {\r\n        if (typeof str != \"string\") return false;\r\n        return !isNaN(Number(str)) && !isNaN(parseFloat(str));\r\n};\r\n","import React, { FunctionComponent, useCallback, useEffect } from \"react\";\r\nimport { SearchQuizItem } from \"../../reducers/quiz.reducer\";\r\nimport { convertTime } from \"../../helpers/time.helper\";\r\nimport \"../../styles/pages/_quiz-search.scss\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Pagination from \"../../components/pagination/Pagination\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDebounce } from \"../../hooks/useDebouce\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { apiSelector } from \"../../reducers/api.reducer\";\r\n\r\nexport interface TakeQuizSceneProps {\r\n        quizzes: SearchQuizItem[];\r\n        amount: number;\r\n        register: Function;\r\n}\r\n\r\nconst SearchQuizScene: FunctionComponent<TakeQuizSceneProps> = ({ quizzes, amount }) => {\r\n        const params = useParams<{ type: string; name: string; page: string }>();\r\n        const { register, watch } = useForm({ defaultValues: { search: \"\" } });\r\n        const watcher = watch(\"search\");\r\n        const history = useHistory();\r\n        const apiState = useSelector(apiSelector);\r\n        const searchDebouce = useDebounce(watcher, 1000);\r\n\r\n        const callApi = useCallback(\r\n                (value: string) => {\r\n                        history.push(`/quiz/search/${apiState.type}/${watcher}/1`);\r\n                },\r\n                [apiState.type, history, watcher]\r\n        );\r\n\r\n        useEffect(() => {\r\n                if (searchDebouce && watcher) callApi(searchDebouce);\r\n        }, [searchDebouce, callApi, watcher]);\r\n\r\n        const NotFound = () => {\r\n                return (\r\n                        <div className=\"quiz-search-not-found f--c\">\r\n                                <h3>Your quiz doesn't exist, Please try different name</h3>\r\n                        </div>\r\n                );\r\n        };\r\n\r\n        const Quzzies = () => {\r\n                return (\r\n                        <div className=\"quiz-search__container\">\r\n                                {quizzes.map((item) => {\r\n                                        return (\r\n                                                <Link\r\n                                                        to={`/quiz/${item._id}/${params.type}`}\r\n                                                        key={item._id}\r\n                                                        className=\"card card__bg\"\r\n                                                >\r\n                                                        <h3 className=\"card__title\">{item.name}</h3>\r\n                                                        <div className=\"card__body\">\r\n                                                                <p className=\"card__text\">{item.questions} Questions</p>\r\n                                                                <p className=\"card__text\"> {convertTime(item.time)}</p>\r\n                                                        </div>\r\n                                                </Link>\r\n                                        );\r\n                                })}\r\n                        </div>\r\n                );\r\n        };\r\n\r\n        const LearnOrExam = () => {\r\n                if (params.type === \"exam\") return <h2>Please select one to take exam</h2>;\r\n                return <h2>Chooise your favorite subject</h2>;\r\n        };\r\n\r\n        return (\r\n                <div className=\"quiz-search\">\r\n                        <div className=\"quiz-search__wrapper f--c\">\r\n                                {LearnOrExam()}\r\n                                <div className=\"quiz-search__box f--b\">\r\n                                        <span className=\"icon__wapper search__icon\">\r\n                                                <img className=\"icon\" src=\"/asset/icons/common/find-white.svg\" alt=\"\" />\r\n                                        </span>\r\n                                        <input\r\n                                                className=\"search__input\"\r\n                                                placeholder=\"Enter quiz name\"\r\n                                                name=\"search\"\r\n                                                autoComplete=\"off\"\r\n                                                ref={(ref) => register(ref)}\r\n                                        />\r\n                                </div>\r\n                        </div>\r\n\r\n                        {quizzes.length ? Quzzies() : NotFound()}\r\n                        <div className=\"quiz-search--bottom\">\r\n                                <Pagination pageSize={12} amount={amount} />\r\n                        </div>\r\n                </div>\r\n        );\r\n};\r\n\r\nexport default SearchQuizScene;\r\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport SearchQuizScene from \"./SearchQuiz\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { quizSelector } from \"../../reducers/quiz.reducer\";\r\nimport { searchQuiz } from \"../../actions/quiz.action\";\r\nimport { store } from \"../../reducers\";\r\nimport { SearchQuizItem } from \"../../reducers/quiz.reducer\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDebounce } from \"../../hooks/useDebouce\";\r\nimport { apiAction } from \"../../reducers/api.reducer\";\r\nexport interface TakeQuizProps {}\r\n\r\nconst SearchQuiz: FunctionComponent<TakeQuizProps> = () => {\r\n        const params = useParams<{ name: string; page: string; type: string }>();\r\n        const quizState = useSelector(quizSelector);\r\n        const { register, watch } = useForm<{ search: string }>({ defaultValues: { search: \"\" } });\r\n        const [quizzes, setQuizzes] = useState<SearchQuizItem[]>([]);\r\n        const watcher = watch(\"search\");\r\n        const searchDebouce = useDebounce(watcher, 500);\r\n\r\n        useEffect(() => {\r\n                store.dispatch(searchQuiz({ input: params.name }));\r\n        }, [params.name, searchDebouce]);\r\n\r\n        useEffect(() => {\r\n                if (params.type) {\r\n                        store.dispatch({ type: apiAction.changeType.type, payload: { type: params.type } });\r\n                }\r\n        }, [params]);\r\n\r\n        useEffect(() => {\r\n                const page = (Number(params.page) - 1) * 12;\r\n                const newQuizzes = quizState.searchQuizzes.slice(page, page + 12);\r\n\r\n                setQuizzes(newQuizzes);\r\n        }, [params, quizState.searchQuizzes]);\r\n\r\n        return <SearchQuizScene amount={quizState.searchQuizzes.length} quizzes={quizzes} register={register} />;\r\n};\r\n\r\nexport default SearchQuiz;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport function useDebounce(value: any, deplay: number) {\r\n        const [debouceValue, setDebouceValue] = useState(value);\r\n        useEffect(() => {\r\n                const handler = setTimeout(() => {\r\n                        setDebouceValue(value);\r\n                }, deplay);\r\n\r\n                return () => {\r\n                        clearTimeout(handler);\r\n                };\r\n        }, [value, deplay]);\r\n\r\n        return debouceValue;\r\n}\r\n","export const convertTime = (time: number): string => {\r\n        const minutes = Math.floor(time / 60);\r\n        time %= 60;\r\n\r\n        const seconds = time;\r\n\r\n        let result = minutes ? `${minutes}m:` : \"\";\r\n        result += seconds ? `${seconds}s` : \"0s\";\r\n\r\n        return result;\r\n};\r\n"],"sourceRoot":""}