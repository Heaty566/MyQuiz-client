{"version":3,"sources":["components/btn/BtnFunc.tsx","components/form/FormInputAutoSize.tsx","containers/createNewQuiz/CreateNewAnswer.tsx","containers/createNewQuiz/CreateNewQuestion.tsx","containers/createNewQuiz/CreateNewQuiz.scene.tsx","containers/createNewQuiz/index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","components/form/FormInput.tsx","components/btn/BtnForm.tsx"],"names":["BtnFunc","handleOnClick","iconName","label","className","onClick","type","src","alt","FormInputAutoSize","placeHolder","register","name","textRef","useRef","handleOnWindowChangeSize","useCallback","current","style","height","scrollHeight","handleTextareRezie","currentTarget","useEffect","window","addEventListener","removeEventListener","onChange","ref","placeholder","CreateNewAnwser","control","nestedIndex","setValue","getValues","useFieldArray","fields","append","remove","useState","corrects","setCorrect","count","setCount","value","Fragment","map","item","index","isCorrectAnswerClassName","includes","key","id","newCorrects","filter","handleOnCheckCorrect","CreateNewQuestion","counter","setCounter","CreateNewAnswer","questionDefaultValue","CreateNewQuizScence","errors","handleOnSubmit","isLoading","message","isError","onSubmit","event","Boolean","length","htmlFor","FormInput","errorMessage","BtnForm","answers","correctAnswer","question","defaultValues","questions","time","CreateNewQuiz","useForm","handleSubmit","apiState","useSelector","apiSelector","handleOnCreateQuiz","data","newAnswers","item2","store","dispatch","createNewQuiz","input","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","width"],"mappings":"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","file":"static/js/7.0c7e8997.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\r\n\r\nexport interface BtnFuncProps {\r\n        handleOnClick: Function;\r\n        iconName: string;\r\n        label: string;\r\n}\r\n\r\nconst BtnFunc: FunctionComponent<BtnFuncProps> = ({ handleOnClick, iconName, label }) => {\r\n        return (\r\n                <button className=\"btn btn__func f--b fade-in\" onClick={() => handleOnClick()} type=\"button\">\r\n                        <span className=\"icon__wrapper icon--2\">\r\n                                <img src={`/asset/icons/common/${iconName}`} alt=\"\" className=\"icon\" />\r\n                        </span>\r\n                        <span>{label}</span>\r\n                </button>\r\n        );\r\n};\r\n\r\nexport default BtnFunc;\r\n","import React, { FunctionComponent, useEffect, ChangeEvent, useRef, useCallback } from \"react\";\r\n\r\nexport interface FormInputAutoSizeProps {\r\n        placeHolder: string;\r\n        register: Function;\r\n        name: string;\r\n}\r\n\r\nconst FormInputAutoSize: FunctionComponent<FormInputAutoSizeProps> = ({ placeHolder = \"\", register, name }) => {\r\n        const textRef = useRef<HTMLTextAreaElement | null>(null);\r\n\r\n        const handleOnWindowChangeSize = useCallback(() => {\r\n                if (textRef.current) {\r\n                        textRef.current.style.height = \"0\";\r\n                        textRef.current.style.height = textRef.current.scrollHeight + \"px\";\r\n                }\r\n        }, []);\r\n        const handleTextareRezie = useCallback(({ currentTarget }: ChangeEvent<HTMLTextAreaElement>) => {\r\n                currentTarget.style.height = \"0\";\r\n                currentTarget.style.height = currentTarget.scrollHeight + \"px\";\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n                window.addEventListener(\"resize\", handleOnWindowChangeSize);\r\n\r\n                return () => {\r\n                        window.removeEventListener(\"resize\", handleOnWindowChangeSize);\r\n                };\r\n        }, [handleOnWindowChangeSize]);\r\n\r\n        return (\r\n                <div className=\"form__group fade-in\">\r\n                        <textarea\r\n                                name={name}\r\n                                className=\"form__textarea\"\r\n                                onChange={handleTextareRezie}\r\n                                ref={(ref) => {\r\n                                        textRef.current = ref;\r\n                                        register(ref);\r\n                                }}\r\n                                placeholder={placeHolder}\r\n                        />\r\n                </div>\r\n        );\r\n};\r\n\r\nexport default FormInputAutoSize;\r\n","import React, { FunctionComponent, useState, useEffect } from \"react\";\r\nimport { Control, useFieldArray } from \"react-hook-form\";\r\nimport { NewQuiz } from \".\";\r\nimport BtnFunc from \"../../components/btn/BtnFunc\";\r\nimport FormInputAutoSize from \"../../components/form/FormInputAutoSize\";\r\n\r\nexport interface CreateNewAnwserProps {\r\n        register: Function;\r\n        control: Control<NewQuiz>;\r\n        nestedIndex: number;\r\n        setValue: Function;\r\n        getValues: Function;\r\n}\r\n\r\nconst CreateNewAnwser: FunctionComponent<CreateNewAnwserProps> = ({\r\n        control,\r\n        nestedIndex = 0,\r\n        register,\r\n        setValue,\r\n        getValues,\r\n}) => {\r\n        const { fields, append, remove } = useFieldArray({\r\n                name: `questions[${nestedIndex}].answers`,\r\n                control,\r\n        });\r\n        const [corrects, setCorrect] = useState<number[]>([]);\r\n        const [count, setCount] = useState(0);\r\n\r\n        const handleOnCheckCorrect = (index: number) => {\r\n                let newCorrects = [...corrects];\r\n                if (corrects.includes(index)) {\r\n                        newCorrects = corrects.filter((item) => item !== index);\r\n                } else newCorrects = [...corrects, index];\r\n                setCorrect(newCorrects);\r\n\r\n                setValue(`questions[${nestedIndex}].correctAnswer`, newCorrects);\r\n        };\r\n\r\n        useEffect(() => {\r\n                register(`questions[${nestedIndex}].correctAnswer`);\r\n                setValue(`questions[${nestedIndex}].correctAnswer`, []);\r\n        }, [nestedIndex, setValue, register]);\r\n\r\n        useEffect(() => {\r\n                append({ value: \"\" });\r\n                setCount(1);\r\n        }, [append]);\r\n\r\n        return (\r\n                <React.Fragment>\r\n                        <div className=\"f--b\">\r\n                                <BtnFunc\r\n                                        label=\"Add answer\"\r\n                                        handleOnClick={() => {\r\n                                                append({ value: \"\" });\r\n                                                setCount(count + 1);\r\n                                        }}\r\n                                        iconName=\"plus.svg\"\r\n                                />\r\n\r\n                                <BtnFunc\r\n                                        handleOnClick={() => {\r\n                                                if (count !== 0) {\r\n                                                        remove(count);\r\n                                                        setCount(count - 1);\r\n                                                }\r\n                                        }}\r\n                                        label=\"Delete answer\"\r\n                                        iconName=\"clear.svg\"\r\n                                />\r\n                        </div>\r\n                        {fields.map((item, index) => {\r\n                                const isCorrectAnswerClassName =\r\n                                        \"quiz-new__check__btn\" +\r\n                                        (corrects.includes(index) ? \" quiz-new__check__btn--active\" : \"\");\r\n\r\n                                return (\r\n                                        <React.Fragment key={item.id}>\r\n                                                <FormInputAutoSize\r\n                                                        placeHolder=\"Answer\"\r\n                                                        register={register}\r\n                                                        name={`questions[${nestedIndex}].answers[${index}].value`}\r\n                                                />\r\n                                                <div className={isCorrectAnswerClassName}>\r\n                                                        <BtnFunc\r\n                                                                handleOnClick={() => handleOnCheckCorrect(index)}\r\n                                                                label=\"Correct answer\"\r\n                                                                iconName=\"correct.svg\"\r\n                                                        />\r\n                                                </div>\r\n                                        </React.Fragment>\r\n                                );\r\n                        })}\r\n                </React.Fragment>\r\n        );\r\n};\r\n\r\nexport default CreateNewAnwser;\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { Control, useFieldArray } from \"react-hook-form\";\r\nimport { NewQuiz, Question } from \".\";\r\nimport BtnFunc from \"../../components/btn/BtnFunc\";\r\nimport FormInputAutoSize from \"../../components/form/FormInputAutoSize\";\r\n\r\nimport { questionDefaultValue } from \".\";\r\nimport CreateNewAnswer from \"./CreateNewAnswer\";\r\n\r\nexport interface CreateNewQuestionProps {\r\n        control: Control<NewQuiz>;\r\n        register: Function;\r\n        getValues: Function;\r\n        setValue: Function;\r\n}\r\n\r\nconst CreateNewQuestion: FunctionComponent<CreateNewQuestionProps> = ({ control, register, setValue, getValues }) => {\r\n        const { fields, append, remove } = useFieldArray<Question>({ control, name: \"questions\" });\r\n        const [counter, setCounter] = useState(0);\r\n\r\n        return (\r\n                <React.Fragment>\r\n                        {fields.map((item, index) => {\r\n                                return (\r\n                                        <div className=\"quiz-new__content fade-in \" key={item.id}>\r\n                                                <div className=\"quiz__question\">\r\n                                                        <div className=\"f--b\">\r\n                                                                <div className=\"menu--left\">\r\n                                                                        <h3 className=\"quiz__menu__label\">\r\n                                                                                {`Question: ${index + 1}`}\r\n                                                                        </h3>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"menu--right\">\r\n                                                                        <BtnFunc\r\n                                                                                iconName=\"clear.svg\"\r\n                                                                                handleOnClick={() => {\r\n                                                                                        if (counter !== 0) {\r\n                                                                                                remove(counter);\r\n                                                                                                setCounter(counter - 1);\r\n                                                                                        }\r\n                                                                                }}\r\n                                                                                label=\"Delete question\"\r\n                                                                        />\r\n                                                                </div>\r\n                                                        </div>\r\n\r\n                                                        <FormInputAutoSize\r\n                                                                placeHolder=\"Question\"\r\n                                                                name={`questions[${index}].question`}\r\n                                                                register={register}\r\n                                                        />\r\n                                                </div>\r\n                                                <div className=\"quiz__answer\">\r\n                                                        <CreateNewAnswer\r\n                                                                control={control}\r\n                                                                nestedIndex={index}\r\n                                                                register={register}\r\n                                                                setValue={setValue}\r\n                                                                getValues={getValues}\r\n                                                        />\r\n                                                </div>\r\n                                        </div>\r\n                                );\r\n                        })}\r\n                        <div className=\"f--c\">\r\n                                <BtnFunc\r\n                                        handleOnClick={() => {\r\n                                                append(questionDefaultValue);\r\n                                                setCounter(counter + 1);\r\n                                        }}\r\n                                        iconName=\"plus.svg\"\r\n                                        label=\"Add Question\"\r\n                                />\r\n                        </div>\r\n                </React.Fragment>\r\n        );\r\n};\r\n\r\nexport default CreateNewQuestion;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport BtnForm from \"../../components/btn/BtnForm\";\r\nimport FormInput from \"../../components/form/FormInput\";\r\n\r\nimport \"../../styles/pages/_quiz-new.scss\";\r\nimport { Control } from \"react-hook-form\";\r\nimport { NewQuiz } from \".\";\r\nimport CreateNewQuestion from \"./CreateNewQuestion\";\r\n\r\nexport interface CreateNewQuizScenceProps {\r\n        register: Function;\r\n        handleOnSubmit: Function;\r\n        errors: any;\r\n        message: string;\r\n        isLoading: boolean;\r\n        control: Control<NewQuiz>;\r\n        setValue: Function;\r\n        isError: boolean;\r\n        getValues: Function;\r\n}\r\n\r\nconst CreateNewQuizScence: FunctionComponent<CreateNewQuizScenceProps> = ({\r\n        errors,\r\n        handleOnSubmit,\r\n        isLoading,\r\n        message,\r\n        control,\r\n        getValues,\r\n        register,\r\n        setValue,\r\n        isError,\r\n}) => {\r\n        return (\r\n                <form className=\"quiz-new\" onSubmit={(event) => handleOnSubmit(event)}>\r\n                        <h1 className=\"quiz-new__title\">Create New Quiz</h1>\r\n                        <div className=\"quiz-new--top\">\r\n                                <div className=\"form\">\r\n                                        {Boolean(message.length) && (\r\n                                                <div className=\"form__col\">\r\n                                                        <div className={isError ? \"form__error\" : \"form__message\"}>\r\n                                                                {message}\r\n                                                        </div>\r\n                                                </div>\r\n                                        )}\r\n                                        <div className=\"form__col\">\r\n                                                <label className=\"form__label\" htmlFor=\"name\">\r\n                                                        Quiz's name\r\n                                                </label>\r\n                                                <FormInput\r\n                                                        placeholder=\"Csi103 ...\"\r\n                                                        name=\"name\"\r\n                                                        register={register}\r\n                                                        errorMessage={errors[\"name\"]}\r\n                                                />\r\n                                        </div>\r\n                                        <div className=\"form__col\">\r\n                                                <label className=\"form__label\" htmlFor=\"time\">\r\n                                                        Time (second)\r\n                                                </label>\r\n                                                <FormInput\r\n                                                        placeholder=\"3600 (1 hour)\"\r\n                                                        name=\"time\"\r\n                                                        register={register}\r\n                                                        errorMessage={errors[\"time\"]}\r\n                                                />\r\n                                        </div>\r\n                                </div>\r\n                        </div>\r\n                        <div className=\"quiz-new--bottom\">\r\n                                <div className=\"quiz__row\">\r\n                                        <CreateNewQuestion\r\n                                                control={control}\r\n                                                register={register}\r\n                                                getValues={getValues}\r\n                                                setValue={setValue}\r\n                                        />\r\n                                </div>\r\n                        </div>\r\n                        <BtnForm label=\"Create Quiz\" isLoading={isLoading} />\r\n                </form>\r\n        );\r\n};\r\n\r\nexport default CreateNewQuizScence;\r\n","import React, { FunctionComponent, useCallback } from \"react\";\r\nimport CreateNewQuizScene from \"./CreateNewQuiz.scene\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { apiSelector } from \"../../reducers/api.reducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { createNewQuiz } from \"../../actions/quiz.action\";\r\nimport { store } from \"../../reducers\";\r\nexport interface FieldInput<T> {\r\n        value: T;\r\n}\r\nexport interface Question {\r\n        question: string;\r\n        answers: FieldInput<string>[];\r\n        correctAnswer: number[];\r\n}\r\n\r\nexport interface NewQuiz {\r\n        name: string;\r\n        time: number;\r\n        questions: Question[];\r\n}\r\n\r\nexport const questionDefaultValue: Question = {\r\n        answers: [],\r\n        correctAnswer: [],\r\n        question: \"\",\r\n};\r\n\r\nconst defaultValues: NewQuiz = {\r\n        name: \"\",\r\n        questions: [questionDefaultValue],\r\n        time: 600,\r\n};\r\nexport interface CreateNewQuizProps {}\r\n\r\nconst CreateNewQuiz: FunctionComponent<CreateNewQuizProps> = () => {\r\n        const { register, handleSubmit, getValues, control, setValue } = useForm<NewQuiz>({ defaultValues });\r\n        const apiState = useSelector(apiSelector);\r\n\r\n        const handleOnCreateQuiz = useCallback((data: NewQuiz) => {\r\n                const newAnswers = data.questions.map((item) => {\r\n                        return { ...item, answers: item.answers.map((item2) => item2.value) };\r\n                });\r\n\r\n                store.dispatch(createNewQuiz({ input: { name: data.name, time: data.time, questions: newAnswers } }));\r\n        }, []);\r\n\r\n        return (\r\n                <CreateNewQuizScene\r\n                        register={register}\r\n                        message={apiState.message}\r\n                        isLoading={apiState.isLoading}\r\n                        errors={apiState.errors}\r\n                        handleOnSubmit={handleSubmit(handleOnCreateQuiz)}\r\n                        control={control}\r\n                        getValues={getValues}\r\n                        setValue={setValue}\r\n                        isError={apiState.isError}\r\n                />\r\n        );\r\n};\r\n\r\nexport default CreateNewQuiz;\r\n","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import * as React from \"react\";\r\n\r\nexport interface FormInputProps {\r\n        placeholder: string;\r\n        name: string;\r\n        register: Function;\r\n        errorMessage: string;\r\n}\r\n\r\nconst FormInput: React.SFC<FormInputProps> = ({ placeholder, name, register, errorMessage = \"\" }) => {\r\n        return (\r\n                <React.Fragment>\r\n                        <div className=\"form__group\">\r\n                                <input\r\n                                        ref={(ref) => register(ref)}\r\n                                        className=\"form__input\"\r\n                                        placeholder={placeholder}\r\n                                        name={name}\r\n                                />\r\n                        </div>\r\n                        {Boolean(errorMessage.length) && <span className=\"form__error\">{errorMessage}</span>}\r\n                </React.Fragment>\r\n        );\r\n};\r\n\r\nexport default FormInput;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport SpinnerIcon from \"../common/Spinner\";\r\n\r\nexport interface BtnFormProps {\r\n        label: string;\r\n        isLoading: boolean;\r\n}\r\n\r\nconst BtnForm: FunctionComponent<BtnFormProps> = ({ label, isLoading }) => {\r\n        if (isLoading)\r\n                return (\r\n                        <div className=\"wave fade-in\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                        </div>\r\n                );\r\n\r\n        return (\r\n                <button className=\"btn btn__link btn__form\" type=\"submit\">\r\n                        {isLoading ? <SpinnerIcon height=\"16\" width=\"18\" /> : label}\r\n                </button>\r\n        );\r\n};\r\n\r\nexport default BtnForm;\r\n"],"sourceRoot":""}